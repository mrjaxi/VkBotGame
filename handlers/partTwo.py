import asyncio

from vkbottle import CtxStorage
from vkbottle import Keyboard, KeyboardButtonColor, \
    Text
import bot
from config import labeler, photo_uploader, audio_uploader, excel_uploader
from data.group import team_way
from data.partTwoMessage import second_part_one, second_part_rooms, second_part_ten, second_part_middle_two, \
    second_part_three, second_part_four, second_part_five, \
    second_part_six, second_part_seven, second_part_middle_five, second_part_eight, second_part_nine, second_part_eleven
from database.aiodb import user_info
from database.settings import settingsAio

from database.db import Database
from states.mystates import PartTwoStates, TestTwoStates, PartThreeStates

ctx_storage = CtxStorage()
db = Database('database.db')


@labeler.message(state=PartTwoStates.PASSWORD_START_TWO_STATES)
async def part_two_one_handler(message):
    if message.text == "–ó–∞–≤–æ–¥" or message.text == "–∑–∞–≤–æ–¥":

        await message.answer("–í–µ—Ä–Ω–æ! üòé"
                             "\n\n–¢—ã –º–æ–ª–æ–¥–µ—Ü!  –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ—Å—Ç—Ä–æ–∏–ª –∑–∞–≤–æ–¥üòè"
                             '\n\n–¢—ã –ø—Ä–æ—à–µ–ª —ç—Ç—É —á–∞—Å—Ç—å "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è" –∏ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏ –Ω–∞–∫–ª–µ–π–∫—É')

        await asyncio.sleep(5)

        await bot.state_dispenser.set(message.peer_id, PartTwoStates.PASSWORD_START_THREE_STATES)
        return "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –∞ –µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∂–∏–ª–µ—Ç–∫–µ"
    else:
        await message.answer("–û–π, –æ—à–∏–±–∫–∞. ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòä")


@labeler.message(state=PartTwoStates.PASSWORD_START_THREE_STATES)
async def part_three_three_handler(message):
    if message.text == "–ö–∞—Ä—å–µ—Ä–∞" or message.text == "–∫–∞—Ä—å–µ—Ä–∞":
        photo1 = await photo_uploader.upload(
            file_source=f"img/carier_part_2.png",
            peer_id=message.peer_id,
        )
        await message.answer('''–ü–∞—Ä–æ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç! ü§©

–ß–∞—Å—Ç—å —Å–æ —Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–æ–π–¥–µ–Ω–∞! 

–ê —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –µ—â–µ –æ–¥–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π,–∏ —ç—Ç–æ "–ö–∞—Ä—å–µ—Ä–∞"''', attachment=photo1)

        try:
            audio = await audio_uploader.upload(
                file_source="voice/2-—á–∞—Å—Ç—å.mp3",
                peer_id=message.peer_id,
                title='–Ω–∞–∑–≤–∞–Ω–∏–µ1'
            )
            await message.answer(attachment=audio)
        except Exception:
            await message("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:(")

        await asyncio.sleep(5)

        await message.answer("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –∫–æ—Ä–æ–±–æ—á–∫—É —Å —Ç–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º ")

        await asyncio.sleep(5)

        await message.answer("""–£ —Ç–µ–±—è –≤ –∫–æ—Ä–æ–±–æ—á–∫–µ –µ—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ–∫

–î–∞–≤–∞–π —É–∫—Ä–∞—Å–∏–º –µ–≥–æ –Ω–∞–∫–ª–µ–π–∫–∞–º–∏,–∫–æ—Ç–æ—Ä—ã–µ –ª–µ–∂–∞—Ç —É —Ç–µ–±—è –≤ —á–µ–º–æ–¥–∞–Ω—á–∏–∫–µ""")

        await asyncio.sleep(5)

        await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_ID)
        return """–ê —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞

–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ—á–∫–∞ –ø–æ–¥ QR-–∫–æ–¥–æ–º –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –º–Ω–µ —Å–∫–æ—Ä–µ–µ–µ–µ, –∞ —è —Ä–∞—Å—Å–∫–∞–∂—É –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ 
"""

    else:
        await message.answer("–û–π, –æ—à–∏–±–∫–∞. ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòä")


@labeler.message(command="check2")
async def check2(message):
    print(db.get_user_id(message.peer_id))
    user_id = db.get_user_id(message.peer_id)[0][0]
    if bool(user_id):
        ctx_storage.set(f"{message.peer_id}_team", (int(user_id) % 10) + 5)

    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_ID)
    return f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ {ctx_storage.get(f'{message.peer_id}_team')}"


@labeler.message(text=["—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞"], state=PartTwoStates.NFC_ID)
async def part_two_two_pass_handler(message):
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    ctx_storage.set(f"{message.peer_id}_position_check", 1)
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_ONE)
    await message.answer("–î–∞–≤–∞–π –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ —Ç–µ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—á–∏–ª—Å—è –≤ —à–∫–æ–ª–µ ")
    await asyncio.sleep(3)
    return second_part_one[id_team]


@labeler.message(state=PartTwoStates.NFC_ID)
async def part_two_two_handler(message):
    if db.nfc_exists(message.text):
        id_team = ctx_storage.get(f"{message.peer_id}_team")
        ctx_storage.set(f"{message.peer_id}_position_check", 0)
        ctx_storage.set(f"{message.peer_id}_nfc", message.text)
        db.set_nfc(message.peer_id, message.text)
        await message.answer('–î–∞–≤–∞–π –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ —Ç–µ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—á–∏–ª—Å—è –≤ —à–∫–æ–ª–µ ')

        await asyncio.sleep(3)
        # await asyncio.sleep(3)
        await message.answer('''–ü—Ä–∏–ª–æ–∂–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é –∫—É–∞—Ä –∫–æ–¥–æ–≤ –Ω–∞ —É—á–∞—Å—Ç–∫–µ "–®–∫–æ–ª–∞, –î–æ–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"
–ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω—è''')
        check = False
        my_position = team_way[id_team].split('-')[0]
        print(my_position)
        while not check:
            if ctx_storage.get(f"{message.peer_id}_position_check") == 1:
                break

            if bool(settingsAio.mass):
                for mas in settingsAio.mass:
                    if mas[1] == message.text and mas[2] == my_position:
                        check = True
                        break
            if check:
                break

            if not settingsAio.aiocheck:
                break

            await asyncio.sleep(2)

        if check:
            await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_ONE)
            return second_part_one[id_team]
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")


@labeler.message(command="check1")
async def check1(message):
    user_id = db.get_user_id(message.peer_id)[0][0]
    if bool(user_id):
        ctx_storage.set(f"{message.peer_id}_team", (int(user_id) % 10))
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_ONE)
    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ"


@labeler.message(text=["—Ä–µ–∞–∫—Ç–æ—Ä", "–†–µ–∞–∫—Ç–æ—Ä"], state=PartTwoStates.NFC_GET_ONE)
async def part_two_three_pass_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 1)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    # await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_TWO)
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_DIPLOM)
    # await message.answer("–£—Ä–∞! –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏!")
    # try:
    #     audio = await audio_uploader.upload(
    #         file_source="voice/univer.mp3",

    await message.answer(
        "–í —à–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã —É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–∞—Å—Ç–æ –ø–æ—è–≤–ª—è–ª—Å—è –≤–æ–ø—Ä–æ—Å, –∫–µ–º –æ–Ω —Å—Ç–∞–Ω–µ—Ç, –∫–æ–≥–¥–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç? –û–Ω –¥—É–º–∞–ª, –≤ –∫–∞–∫–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –µ–º—É –ø–æ–π—Ç–∏ —É—á–∏—Ç—å—Å—è"
        "\n\n–ü—Ä–∏ —ç—Ç–æ–º –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –µ–º—É –¥–≤–∏–≥–∞—Ç—å—Å—è")
    await message.answer(10)
    await message.answer("–£—Ä–∞! –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏!")
    await asyncio.sleep(2)
    await message.answer(second_part_middle_two[id_team])
    await asyncio.sleep(5)
    # await message.answer(second_part_two[id_team])

    await message.answer(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –≤—Ä—É—á–µ–Ω–∏–∏ –¥–∏–ø–ª–æ–º–æ–≤! –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–∏–ª —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ üßë‚Äçüéì")
    await asyncio.sleep(5)
    await message.answer(
        "–¢—ã –æ—Ç–ª–∏—á–Ω–æ —É—á–∏–ª—Å—è,–ø—Ä–æ—è–≤–ª—è–ª –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–µ–±—è —Ç–æ–ª—å–∫–æ —Å —Ö–æ—Ä–æ—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã.")
    await asyncio.sleep(5)
    return "–ö—Ä–æ–º–µ —É—á–µ–±—ã, —Ç—ã —Å–º–æ–≥ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∏ —Å–≤–æ–∏–º –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç —Å —Ç–æ–±–æ–π —Å–æ —à–∫–æ–ª—ã. –ò–∏–∏... –ü–æ—ç—Ç–æ–º—É—É—É... –ò–º–µ–Ω–Ω–æ —Ç–µ–±—è –ø–æ–∑–≤–∞–ª–∏ –Ω–∞ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ !"


@labeler.message(state=PartTwoStates.NFC_GET_ONE)
async def part_two_three_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 0)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    db.set_subject(message.peer_id, message.text)
    await asyncio.sleep(1)
    await message.answer(
        "–í —à–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã —É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–∞—Å—Ç–æ –ø–æ—è–≤–ª—è–ª—Å—è –≤–æ–ø—Ä–æ—Å, –∫–µ–º –æ–Ω —Å—Ç–∞–Ω–µ—Ç, –∫–æ–≥–¥–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç? –û–Ω –¥—É–º–∞–ª, –≤ –∫–∞–∫–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –µ–º—É –ø–æ–π—Ç–∏ —É—á–∏—Ç—å—Å—è"
        "\n\n–ü—Ä–∏ —ç—Ç–æ–º –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –µ–º—É –¥–≤–∏–≥–∞—Ç—å—Å—è")

    await asyncio.sleep(10)
    await message.answer(
        '–ü—Ä–æ—à–ª–æ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –∏ –≤–æ—Ç –æ–Ω —É–∂–µ –ø–æ—Å—Ç—É–ø–∏–ª –∏ –Ω–∞—á–∞–ª —É—á–∏—Ç—å—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ. –î–∞–≤–∞–π –∂–µ —É–∑–Ω–∞–µ–º, —á—Ç–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ'
        ' \n\n–ü–æ–¥–æ–π–¥–∏ –∫ —É—á–∞—Å—Ç–∫—É "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –ö–æ–ª–ª–µ–¥–∂" –∏ –ø—Ä–∏–ª–æ–∂–∏ —Å–≤–æ–µ–≥–æ —á–µ–ª–æ–≤–µ—á–∫–∞ –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –±–ª–æ–∫—É')

    check = False
    my_position = team_way[id_team].split('-')[1]
    while not check:
        # card = await user_info(ctx_storage.get(f"{message.peer_id}_nfc"))
        if ctx_storage.get(f"{message.peer_id}_position_check") == 1:
            break
        if bool(settingsAio.mass):
            for mas in settingsAio.mass:
                if mas[1] == ctx_storage.get(f"{message.peer_id}_nfc") and mas[2] == my_position:
                    check = True
                    break
        if check:
            break

        if not settingsAio.aiocheck:
            break

        await asyncio.sleep(2)

    if check:
        # await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_TWO)
        await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_DIPLOM)
        await message.answer("–£—Ä–∞! –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏!")
        await asyncio.sleep(2)
        # try:
        #     audio = await audio_uploader.upload(
        #         file_source="voice/univer.mp3",
        #         peer_id=message.peer_id,
        #         title='–Ω–∞–∑–≤–∞–Ω–∏–µ'
        #     )
        #     await message.answer(attachment=audio)
        # except Exception:
        #     await message("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:(")
        await message.answer(second_part_middle_two[id_team])
        await asyncio.sleep(10)
        # await message.answer(second_part_two[id_team])

        await message.answer(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –≤—Ä—É—á–µ–Ω–∏–∏ –¥–∏–ø–ª–æ–º–æ–≤! –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–∏–ª —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ üßë‚Äçüéì")
        await asyncio.sleep(5)
        await message.answer(
            "–¢—ã –æ—Ç–ª–∏—á–Ω–æ —É—á–∏–ª—Å—è,–ø—Ä–æ—è–≤–ª—è–ª –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–µ–±—è —Ç–æ–ª—å–∫–æ —Å —Ö–æ—Ä–æ—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã.")
        await asyncio.sleep(5)
        await message.answer(
            "–ö—Ä–æ–º–µ —É—á–µ–±—ã, —Ç—ã —Å–º–æ–≥ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∏ —Å–≤–æ–∏–º –Ω–∞–≤—ã–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç —Å —Ç–æ–±–æ–π —Å–æ —à–∫–æ–ª—ã. –ò–∏–∏... –ü–æ—ç—Ç–æ–º—É—É—É... –ò–º–µ–Ω–Ω–æ —Ç–µ–±—è –ø–æ–∑–≤–∞–ª–∏ –Ω–∞ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ !")
        await asyncio.sleep(5)

        keyboard = await message.answer(
            '''–ê —Ç–µ–ø–µ—Ä—å –º—ã —É–∑–Ω–∞–µ–º –∫—É–¥–∞ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è, –º–Ω–µ —Å—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–∞–∂–µ —Å–∞–º–æ–º—Éü§Ø''',
            keyboard=(
                Keyboard(inline=True)
                .add(Text("–ì–æ—Ç–æ–≤!"), color=KeyboardButtonColor.POSITIVE)
            ).get_json()
        )

        return keyboard


@labeler.message(text=["–∫—É–¥–∞", "–ö—É–¥–∞"], state=PartTwoStates.NFC_DIPLOM)
async def open_diplom_pass_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 1)

    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_TWO)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    await message.answer('''–£—Ä–∞–∞–∞,—è —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–∏–ª —Ä–∞–±–æ—Ç—É –∏ —Å–µ–π—á–∞—Å—Å—Å —Ç—ã —É–∑–Ω–∞–µ—à—å –≥–¥–µ–µ–µ...
ü§©ü§©ü§©''')
    await asyncio.sleep(3)
    await message.answer(second_part_rooms[id_team])
    await asyncio.sleep(2)
    return second_part_three[id_team]


@labeler.message(text=["–ì–æ—Ç–æ–≤!"], state=PartTwoStates.NFC_DIPLOM)
async def open_diplom_handler(message):
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    ctx_storage.set(f"{message.peer_id}_position_check", 0)

    await message.answer('–ü–æ–¥–Ω–µ—Å–∏ —Å–≤–æ–µ–π —á–µ–ª–æ–≤–µ—á–∫–∞ —Å –∫—É–∞—Ä –∫–æ–¥–æ–º –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é –Ω–∞ —É—á–∞—Å—Ç–∫–µ "–û—Ñ–∏—Å –∫–æ–º–ø–∞–Ω–∏–∏" –∏ —Å–∫–æ—Ä–µ–µ –¥–∞–≤–∞–π —É–∑–Ω–∞–π –∫—É–¥–∞ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–π–¥—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å')

    check = False
    my_position = team_way[id_team].split('-')[2]

    while not check:
        # card = await user_info(ctx_storage.get(f"{message.peer_id}_nfc"))
        if ctx_storage.get(f"{message.peer_id}_position_check") == 1:
            break
        if bool(settingsAio.mass):
            for mas in settingsAio.mass:
                print(my_position, ctx_storage.get(f"{message.peer_id}_nfc"), mas)
                if mas[1] == ctx_storage.get(f"{message.peer_id}_nfc") and mas[2] == my_position:
                    check = True
                    break
        if check:
            break

        if not settingsAio.aiocheck:
            break

        await asyncio.sleep(2)

    if check:
        await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_TWO)
        await message.answer('''–£—Ä–∞–∞–∞,—è —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–∏–ª —Ä–∞–±–æ—Ç—É –∏ —Å–µ–π—á–∞—Å—Å—Å —Ç—ã —É–∑–Ω–∞–µ—à—å –≥–¥–µ–µ–µ...
    ü§©ü§©ü§©''')
        await asyncio.sleep(5)
        keyboard = await message.answer(
            second_part_rooms[id_team],
            keyboard=(
                Keyboard(inline=True)
                .add(Text("–î–∞ üòé"), color=KeyboardButtonColor.POSITIVE)
            ).get_json()
        )
        return keyboard


@labeler.message(text=["–ê–ø–ø–∞—Ä–∞—Ç", "–∞–ø–ø–∞—Ä–∞—Ç"], state=PartTwoStates.NFC_GET_TWO)
async def part_two_four_pass_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 1)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_THREE)
    await message.answer(second_part_four[id_team])
    await asyncio.sleep(3)

    await message.answer(second_part_five[id_team])

    await asyncio.sleep(5)
    await message.answer("–¢—ã —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–ª ,–ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–µ–±—è —Å –ª—É—á—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã,–≤—ã–ø–æ–ª–Ω—è–ª –≤—Å–µ –Ω–∞–º–µ—á–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.")

    await asyncio.sleep(3)
    await message.answer(second_part_middle_five[id_team])

    await asyncio.sleep(5)
    await message.answer("–¢–µ–±–µ –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ö–æ—á–µ—Ç—Å—è –≤—Å–µ-—Ç–∞–∫–∏ —Å—Ç–∞—Ç—å –≥–ª–∞–≤–Ω–µ–µ? –¢–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—ã—Å–∏–º —Ä–∞–∑—Ä—è–¥?")

    await asyncio.sleep(3)
    await message.answer(
        '''–¢–∞–∫, –≥–¥–µ –∂–µ –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑—Ä—è–¥? –î–∞–π –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...\n\n–ê–∞–∞–∞, –¥–∞–∞–∞, —è –≤—Å–ø–æ–º–Ω–∏–ª!!! –≠—Ç–æ –∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –û–ù–ü–óü§© –•–æ—á—É —Ç–µ–±–µ –¥–∞–∂–µ —Å–∫–∞–∑–∞—Ç—å –ø–æ —Å–µ–∫—Ä–µ—Ç—É,—á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å —Ç–∞–∫–∞—è –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–Ω–∞ –¥–∞–∂–µ –ø–æ-–Ω–µ–æ–±—ã—á–Ω–æ–º—É "–¢—Ä–∏ —Ä—É–±–µ–∂–∞". –¢–∞–º –≤–µ–¥—å –¥–∞–∂–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π —Ç–µ–æ—Ä–∏–∏,–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏—è –Ω–∞ –∑–∞–≤–æ–¥–µ.''')

    await asyncio.sleep(10)
    await message.answer(
        '''–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–º–µ–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–æ–≤–∞–ª —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Å—Ç–∞—Ä—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º –∏ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–≤—ã—Å–∏—Ç—å —Ç–µ–±–µ —Ä–∞–∑—Ä—è–¥''')
    await asyncio.sleep(5)
    return '''–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä—è–¥–∞ –ø—Ä–∏–ª–æ–∂–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –∫—É–∞—Ä –∫–æ–¥ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é –∏ —Å–∫–æ—Ä–µ–µ–µ–µ —É–∑–Ω–∞–π –∫–∞–∫–æ–π –æ–Ω —Ä–∞–∑—Ä—è–¥ –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–ª—É—á–∏–ªü§©'''


@labeler.message(text=["–î–∞ üòé"], state=PartTwoStates.NFC_GET_TWO)
async def part_two_four_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 0)
    id_team = ctx_storage.get(f"{message.peer_id}_team")

    await message.answer(second_part_three[id_team])

    check = False
    my_position = team_way[id_team].split('-')[3]
    while not check:
        # card = await user_info(ctx_storage.get(f"{message.peer_id}_nfc"))
        if ctx_storage.get(f"{message.peer_id}_position_check") == 1:
            break
        if bool(settingsAio.mass):
            for mas in settingsAio.mass:
                if mas[1] == ctx_storage.get(f"{message.peer_id}_nfc") and mas[2] == my_position:
                    check = True
                    break
        if check:
            break

        if not settingsAio.aiocheck:
            break

        await asyncio.sleep(2)

    if check:
        await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_THREE)
        await message.answer(second_part_four[id_team])
        await asyncio.sleep(3)

        await message.answer(second_part_five[id_team])

        await asyncio.sleep(5)
        await message.answer("–¢—ã —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–ª ,–ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–µ–±—è —Å –ª—É—á—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã,–≤—ã–ø–æ–ª–Ω—è–ª –≤—Å–µ –Ω–∞–º–µ—á–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.")

        await asyncio.sleep(3)
        await message.answer(second_part_middle_five[id_team])

        await asyncio.sleep(5)
        await message.answer("–¢–µ–±–µ –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ö–æ—á–µ—Ç—Å—è –≤—Å–µ-—Ç–∞–∫–∏ —Å—Ç–∞—Ç—å –≥–ª–∞–≤–Ω–µ–µ? –¢–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—ã—Å–∏–º —Ä–∞–∑—Ä—è–¥?")

        await asyncio.sleep(3)
        await message.answer(
            '''–¢–∞–∫, –≥–¥–µ –∂–µ –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑—Ä—è–¥? –î–∞–π –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...\n\n–ê–∞–∞–∞, –¥–∞–∞–∞, —è –≤—Å–ø–æ–º–Ω–∏–ª!!! –≠—Ç–æ –∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –û–ù–ü–óü§© –•–æ—á—É —Ç–µ–±–µ –¥–∞–∂–µ —Å–∫–∞–∑–∞—Ç—å –ø–æ —Å–µ–∫—Ä–µ—Ç—É,—á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å —Ç–∞–∫–∞—è –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–Ω–∞ –¥–∞–∂–µ –ø–æ-–Ω–µ–æ–±—ã—á–Ω–æ–º—É "–¢—Ä–∏ —Ä—É–±–µ–∂–∞". –¢–∞–º –≤–µ–¥—å –¥–∞–∂–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π —Ç–µ–æ—Ä–∏–∏,–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏—è –Ω–∞ –∑–∞–≤–æ–¥–µ.''')

        await asyncio.sleep(10)
        keyboard = await message.answer(
            '''–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–º–µ–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–æ–≤–∞–ª —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Å—Ç–∞—Ä—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º –∏ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–≤—ã—Å–∏—Ç—å —Ç–µ–±–µ —Ä–∞–∑—Ä—è–¥. –ì–æ—Ç–æ–≤?üòè''',
            keyboard=(
                    Keyboard(inline=True)
                    .add(Text("–ö–æ–Ω–µ—á–Ω–æ üòÉ"), color=KeyboardButtonColor.POSITIVE)
                ).get_json()
            )
        return keyboard


@labeler.message(text=["–†–∞–∑—Ä—è–¥", "—Ä–∞–∑—Ä—è–¥"], state=PartTwoStates.NFC_GET_THREE)
async def part_two_five_pass_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 1)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    await bot.state_dispenser.set(message.peer_id, PartThreeStates.PASS)
    await message.answer(second_part_six[id_team])
    await asyncio.sleep(5)
    await message.answer(
        "–ù—É –≤–æ—Ç —Ç—ã –∏ —É–∑–Ω–∞–ª –∫–∞–∫–æ–π —Ä–∞–∑—Ä—è–¥ –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂! –ü–æ–∂–µ–ª–∞—é –µ–º—É —É–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µü§©")
    await asyncio.sleep(3)
    # await asyncio.sleep(3)

    await message.answer('''–†–µ–±—è—Ç–∞, –Ω–∞–º —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∑–∞ –∫—Ä—É–≥–ª—ã–º —Å—Ç–æ–ª–æ–º —Å–≤–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

    –í–æ—Ç –ø–æ –∫–∞–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤–∞—à —Ä–∞—Å—Å–∫–∞–∑ 
    —É—Å–ª–æ–≤–∏—è:
    1. –£ –≤–∞—Å –±—É–¥–µ—Ç–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞
    2. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ ""–í–æ—Ç –º–æ—è –∫–æ–º–∞–Ω–¥–∞..."" ;–æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å,–ø–æ–º–æ–≥–∞—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    3. –ù—É–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ –∏ —á—ë—Ç–∫–æ ,—á—Ç–æ–±—ã —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    4. –í–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å–∫–∞–∑–∞ –Ω–µ–ª—å–∑—è –Ω–∏–∫—É–¥–∞ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—Ç—å. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —á–∏—Ç–∞—Ç—å 



    –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è"''')
    await asyncio.sleep(5)

    await message.answer("""–ß—Ç–æ –∂–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à —Ä–∞—Å—Å–∫–∞–∑?

    1. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —á–ª–µ–Ω–æ–≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã

    2. –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –∫—Ä–æ–º–µ —É—á–µ–±—ã

    3. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂""")
    await asyncio.sleep(10)

    await message.answer("""–û–≥–æ,–≤–æ—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

    –ì–¥–µ –∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?

    1. –ü–æ–∏—Å–∫–∞—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –º–µ–Ω—è

    2. –°–ø—Ä–æ—Å–∏—Ç—å —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∂–∏–ª–µ—Ç–∫–µ""")
    await asyncio.sleep(10)
    await message.answer("–ù—É —á—Ç–æ –∂–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å–∫–∞–∑–∞ –ø–æ—à–ª–æ, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –£ —Ç–µ–±—è –∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç!!!")
    await asyncio.sleep(255)

    await message.answer("-–¢–∏–∫-—Ç–∞–∫...")
    await asyncio.sleep(15)
    await message.answer("-–¢–∏–∫-—Ç–∞–∫...")
    await asyncio.sleep(15)
    await message.answer("-–¢–∏–∫-—Ç–∞–∞–∞–∞–∫–∫‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è")
    await asyncio.sleep(15)
    # TODO: –ñ–¥—É —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
    return "–ö–æ–≥–¥–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Å—Ç—É–ø—è—Ç, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∑–Ω–∞–µ—à—å –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"


@labeler.message(text=["–ö–æ–Ω–µ—á–Ω–æ üòÉ"], state=PartTwoStates.NFC_GET_THREE)
async def part_two_five_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 0)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    await message.answer('''–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä—è–¥–∞ –ø—Ä–∏–ª–æ–∂–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –∫—É–∞—Ä –∫–æ–¥ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é –∏ —Å–∫–æ—Ä–µ–µ–µ–µ —É–∑–Ω–∞–π –∫–∞–∫–æ–π –æ–Ω —Ä–∞–∑—Ä—è–¥ –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–ª—É—á–∏–ªü§©''')
    check = False
    my_position = team_way[id_team].split('-')[4]
    while not check or ctx_storage.get(f"{message.peer_id}_position_check") == 0:
        # card = await user_info(ctx_storage.get(f"{message.peer_id}_nfc"))
        if ctx_storage.get(f"{message.peer_id}_position_check") == 1:
            break
        if bool(settingsAio.mass):
            for mas in settingsAio.mass:
                if mas[1] == ctx_storage.get(f"{message.peer_id}_nfc") and mas[2] == my_position:
                    check = True
                    break
        if check:
            break

        if not settingsAio.aiocheck:
            break

        await asyncio.sleep(2)

    if check:
        await bot.state_dispenser.set(message.peer_id, PartThreeStates.PASS)
        await message.answer(second_part_six[id_team])
        await asyncio.sleep(5)
        await message.answer(
            "–ù—É –≤–æ—Ç —Ç—ã –∏ —É–∑–Ω–∞–ª –∫–∞–∫–æ–π —Ä–∞–∑—Ä—è–¥ –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂! –ü–æ–∂–µ–ª–∞—é –µ–º—É —É–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µü§©")
        await asyncio.sleep(3)
        # await asyncio.sleep(3)

        await message.answer('''–†–µ–±—è—Ç–∞, –Ω–∞–º —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∑–∞ –∫—Ä—É–≥–ª—ã–º —Å—Ç–æ–ª–æ–º —Å–≤–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

–í–æ—Ç –ø–æ –∫–∞–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤–∞—à —Ä–∞—Å—Å–∫–∞–∑ 
—É—Å–ª–æ–≤–∏—è:
1. –£ –≤–∞—Å –±—É–¥–µ—Ç–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞
2. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ ""–í–æ—Ç –º–æ—è –∫–æ–º–∞–Ω–¥–∞..."" ;–æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å,–ø–æ–º–æ–≥–∞—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
3. –ù—É–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ –∏ —á—ë—Ç–∫–æ ,—á—Ç–æ–±—ã —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
4. –í–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å–∫–∞–∑–∞ –Ω–µ–ª—å–∑—è –Ω–∏–∫—É–¥–∞ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—Ç—å. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —á–∏—Ç–∞—Ç—å 



–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è"''')
        await asyncio.sleep(5)

        await message.answer("""–ß—Ç–æ –∂–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à —Ä–∞—Å—Å–∫–∞–∑?

1. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —á–ª–µ–Ω–æ–≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã

2. –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –∫—Ä–æ–º–µ —É—á–µ–±—ã

3. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂""")
        await asyncio.sleep(10)

        await message.answer("""–û–≥–æ,–≤–æ—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

–ì–¥–µ –∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?

1. –ü–æ–∏—Å–∫–∞—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –º–µ–Ω—è

2. –°–ø—Ä–æ—Å–∏—Ç—å —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∂–∏–ª–µ—Ç–∫–µ""")
        await asyncio.sleep(10)
        await message.answer("–ù—É —á—Ç–æ –∂–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å–∫–∞–∑–∞ –ø–æ—à–ª–æ, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –£ —Ç–µ–±—è –∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç!!!")
        await asyncio.sleep(255)

        await message.answer("-–¢–∏–∫-—Ç–∞–∫...")
        await asyncio.sleep(15)
        await message.answer("-–¢–∏–∫-—Ç–∞–∫...")
        await asyncio.sleep(15)
        await message.answer("-–¢–∏–∫-—Ç–∞–∞–∞–∞–∫–∫‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è")
        await asyncio.sleep(15)
        # TODO: –ñ–¥—É —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        return "–ö–æ–≥–¥–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Å—Ç—É–ø—è—Ç, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∑–Ω–∞–µ—à—å –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"


@labeler.message(text=["–ü–æ–µ—Ö–∞–ª–∏"], state=PartTwoStates.NFC_GET_FOUR)
async def part_two_six_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 0)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    await message.answer(second_part_seven[id_team])
    check = False
    my_position = team_way[id_team].split('-')[4]
    while not check or ctx_storage.get(f"{message.peer_id}_position_check") == 0:
        # card = await user_info(ctx_storage.get(f"{message.peer_id}_nfc"))
        if ctx_storage.get(f"{message.peer_id}_position_check") == 1:
            break
        if bool(settingsAio.mass):
            for mas in settingsAio.mass:
                if mas[1] == ctx_storage.get(f"{message.peer_id}_nfc") and mas[2] == my_position:
                    check = True
                    break
        if check:
            break

        if not settingsAio.aiocheck:
            break
        await asyncio.sleep(2)

    if check:
        await message.answer(second_part_eight[id_team])

        await asyncio.sleep(5)
        await message.answer(second_part_nine[id_team])

        await asyncio.sleep(50)
        # await asyncio.sleep(5)
        await message.answer("–¢–∞–∫, –∞ –∫—É–¥–∞ –∂–µ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è –¥–∞–ª—å—à–µ? –î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å"
                             "\n\n–•–æ—Ç—è –Ω–µ—Ç, —ç—Ç–æ –±—ã–ª–æ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –ù–ü–ó"
                             "\n\n–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéâüòä")
        await asyncio.sleep(2)
        # ctx_storage.delete(f"{message.peer_id}_team")
        # ctx_storage.delete(f"{message.peer_id}_number")
        # ctx_storage.delete(f"{message.peer_id}_position_check")
        # ctx_storage.delete(f"{message.peer_id}_nfc")
        await bot.state_dispenser.set(message.peer_id, PartThreeStates.PASS)
        return "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å"


@labeler.message(text="check1")
async def check(message):
    user_id = db.get_user_id(message.peer_id)[0][0]
    if bool(user_id):
        ctx_storage.set(f"{message.peer_id}_team", (int(user_id) % 10))
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.NFC_GET_FOUR)
    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ"


@labeler.message(text=["–ü–µ—á—å", "–ø–µ—á—å"], state=PartTwoStates.NFC_GET_FOUR)
async def part_two_six_pass_handler(message):
    ctx_storage.set(f"{message.peer_id}_position_check", 1)
    id_team = ctx_storage.get(f"{message.peer_id}_team")
    db.set_status(message.peer_id)
    await message.answer(second_part_eight[id_team])

    await asyncio.sleep(5)
    await message.answer(second_part_nine[id_team])

    await asyncio.sleep(50)
    # await asyncio.sleep(5)
    await message.answer("–¢–∞–∫, –∞ –∫—É–¥–∞ –∂–µ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è –¥–∞–ª—å—à–µ? –î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å\n\n"
                         "–•–æ—Ç—è –Ω–µ—Ç, —ç—Ç–æ –±—ã–ª–æ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –ù–ü–ó"
                         "\n\n–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéâüòä")
    # ctx_storage.delete(f"{message.peer_id}_team")
    # ctx_storage.delete(f"{message.peer_id}_number")
    # ctx_storage.delete(f"{message.peer_id}_position_check")
    # ctx_storage.delete(f"{message.peer_id}_nfc")
    await asyncio.sleep(2)
    await bot.state_dispenser.set(message.peer_id, PartThreeStates.PASS)
    return "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å"


@labeler.message(state=PartThreeStates.PASS)
async def part_three_one(message):
    if message.text == "–í—ã–∑–æ–≤" or message.text == "–≤—ã–∑–æ–≤":
        id_team = ctx_storage.get(f"{message.peer_id}_team")
        photo1 = await photo_uploader.upload(
            file_source=f"img/–ß–ê–°–¢–¨ 3 - –í–´–ó–û–í–´.png",
            peer_id=message.peer_id,
        )
        await message.answer('''–ü–∞—Ä–æ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç! ü§©

–ß–∞—Å—Ç—å —Å –∫–∞—Ä—å–µ—Ä–æ–π –ø—Ä–æ–π–¥–µ–Ω–∞!

–ê —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –µ—â–µ –æ–¥–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π, –∏ —ç—Ç–æ "–í—ã–∑–æ–≤—ã"
''', attachment=photo1)
        await asyncio.sleep(2)
        try:
            audio = await audio_uploader.upload(
                file_source="voice/3-—á–∞—Å—Ç—å.mp3",
                peer_id=message.peer_id,
                title='–Ω–∞–∑–≤–∞–Ω–∏–µ'
            )
            await message.answer(attachment=audio)
        except Exception:
            await message("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:(")
        await asyncio.sleep(5)

        await message.answer('''–¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª –∑–∞–≤–æ–¥ –∏ –¥–∞–∂–µ —Å–º–æ–≥ –ø–æ–¥–Ω—è—Ç—å—Å—è –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü–µ. –ó–∞–≤–æ–¥, –∫–∞–∫ –∏ –ª—é–±–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ, —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –≤ –Ω–æ–≥—É —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏!

–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø –Ω–∞—à–µ–π –∏–≥—Ä—ã –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω —Ç—Ä–µ–Ω–¥–∞–º –∏ –≤—ã–∑–æ–≤–∞–º –æ—Ç—Ä–∞—Å–ª–∏ üòé

–ù–æ —á—Ç–æ –∂–µ —Ç–∞–∫–æ–µ —ç—Ç–∏ —Ç—Ä–µ–Ω–¥—ã –∏ –≤—ã–∑–æ–≤—ã? ü§î

–¢—Ä–µ–Ω–¥ - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º, –∏ –ª—é–±–æ–º—É –∑–∞–≤–æ–¥—É –Ω—É–∂–Ω–æ –µ–π —Å–ª–µ–¥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–æ—Å—Ç—Ä–µ–±–∞–≤–∞–Ω–Ω—ã–º! –ê –≤—ã–∑–æ–≤–∞–º–∏ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, —Ä–µ—à–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è! 
''')
        await asyncio.sleep(5)

        await message.answer("–°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥–∞–º –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã–∑–æ–≤—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏! –í–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—è—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º!")
        await asyncio.sleep(5)

        await message.answer("–î–∞–≤–∞–π –∂–µ —Å–∫–æ—Ä–µ–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–∞–º–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∏ –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–∞—à–µ–π –∏–≥—Ä—ã!")

        await asyncio.sleep(3)
        await message.answer(second_part_ten[id_team])

        #TODO: –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∞–ª 164 —Å—Ç—Ä–æ—á–∫—É
        await asyncio.sleep(5)
        await message.answer(second_part_eleven[id_team])

        await asyncio.sleep(5)
        await message.answer("–ù—É —á—Ç–æ? –í–æ–∑–Ω–∏–∫–ª–∏ –∏–¥–µ–∏? –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∞—à–µ–≥–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –±—É–º–∞–≥—É, –∫–∞—Ä—Ç–æ–Ω, —Ñ–ª–æ–º–∞—Å—Ç–µ—Ä—ã, –Ω–æ–∂–Ω–∏—Ü—ã, —Å–∫–æ—Ç—á –∏ –≤–∞—à—É —Ñ–∞–Ω—Ç–∞–∑–∏—é –∏ –≤–æ–ø–ª–æ—Ç–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–∞–∫–µ—Ç–µ! ‚ú®")

        await asyncio.sleep(10)
        await message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–∞—Å—Å–∫–∞–∑—É –æ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ!")

        await message.answer("""–ß—Ç–æ –∂–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞—à —Ä–∞—Å—Å–∫–∞–∑?

        1. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —á–ª–µ–Ω–æ–≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã

        2. –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –∫—Ä–æ–º–µ —É—á–µ–±—ã

        3. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂""")
        await asyncio.sleep(5)

        await message.answer("""–û–≥–æ,–≤–æ—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è

        –ì–¥–µ –∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?

        1. –ü–æ–∏—Å–∫–∞—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –º–µ–Ω—è

        2. –°–ø—Ä–æ—Å–∏—Ç—å —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π –∂–∏–ª–µ—Ç–∫–µ""")
        await asyncio.sleep(5)
        await message.answer("–ù—É —á—Ç–æ –∂–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å–∫–∞–∑–∞ –ø–æ—à–ª–æ, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –£ —Ç–µ–±—è –∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç!!!")
        await asyncio.sleep(255)

        await message.answer("-–¢–∏–∫-—Ç–∞–∫...")
        await asyncio.sleep(15)
        await message.answer("-–¢–∏–∫-—Ç–∞–∫...")
        await asyncio.sleep(15)
        await message.answer("-–¢–∏–∫-—Ç–∞–∞–∞–∞–∫–∫‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è")
        await asyncio.sleep(15)
        await bot.state_dispenser.set(message.peer_id, PartThreeStates.PASS_ONE)

        return "–ö–æ–≥–¥–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Å—Ç—É–ø—è—Ç ,—Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∑–Ω–∞–µ—à—å –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"
    else:
        await message.answer("–û–π, –æ—à–∏–±–∫–∞. ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòä")


@labeler.message(state=PartThreeStates.PASS_ONE)
async def part_three_two(message):
    if message.text == "–ê–Ω–∫–µ—Ç–∞" or message.text == "–∞–Ω–∫–µ—Ç–∞":
        await message.answer('''–¢–∞–∫, –∞ –∫—É–¥–∞ –∂–µ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è –¥–∞–ª—å—à–µ? –î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å

–•–æ—Ç—è –Ω–µ—Ç, —ç—Ç–æ –±—ã–ª–æ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –ù–ü–ó

–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéâüòä''')
        await asyncio.sleep(5)
        await message.answer("–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–≥—Ä–µ üòä")
        await bot.state_dispenser.set(message.peer_id, TestTwoStates.ONE_STATES)
        keyboard = (
            Keyboard(inline=True)
            .add(Text("–ò–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–π"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–ò–≥—Ä–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–µ–π"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–û—Ç–Ω–æ—à—É—Å—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"), color=KeyboardButtonColor.POSITIVE)
        ).get_json()
        mess_key = await message.answer("–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ —Ç–µ–±–µ –∏–≥—Ä–∞?",
                                        keyboard=keyboard)
        return mess_key
    else:
        await message.answer("–û–π, –æ—à–∏–±–∫–∞. ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòä")

@labeler.message(text=["–ò–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–π",
                       "–ò–≥—Ä–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–µ–π",
                       "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å",
                       "–û—Ç–Ω–æ—à—É—Å—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
                       "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"], state=TestTwoStates.ONE_STATES)
async def answer_test_two_handler(message):
    check = {
        "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å": 1,
        "–û—Ç–Ω–æ—à—É—Å—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ": 2,
        "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å": 3,
        "–ò–≥—Ä–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–µ–π": 4,
        "–ò–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–π": 5
    }
    db.set_end_answer_one(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestTwoStates.TWO_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–ü–æ–¥–µ–ª—é—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –Ω–∏–º–∏"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–¢–æ—á–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ –∑–Ω–∞—é"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–í–æ–∑–º–æ–∂–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–†–∞—Å—Å–∫–∞–∂–µ—à—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ü–æ–¥–µ–ª—é—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –Ω–∏–º–∏",
                       "–¢–æ—á–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É",
                       "–ù–µ –∑–Ω–∞—é",
                       "–í–æ–∑–º–æ–∂–Ω–æ",
                       "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"],
                 state=TestTwoStates.TWO_STATES)
async def answer_test_three_handler(message):
    check = {
        "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç": 1,
        "–í–æ–∑–º–æ–∂–Ω–æ": 2,
        "–ù–µ –∑–Ω–∞—é": 3,
        "–¢–æ—á–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É": 4,
        "–ü–æ–¥–µ–ª—é—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –Ω–∏–º–∏": 5
    }
    db.set_end_answer_two(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestTwoStates.THREE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∏ –ø–æ–ª–µ–∑–Ω–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ —Å–∫—É—á–Ω–∞—è —Ç–µ–º–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–æ–∂–Ω–∞—è –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ç–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–æ–∂–Ω–∞—è –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è",
                       "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ —Å–∫—É—á–Ω–∞—è —Ç–µ–º–∞",
                       "–ù–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å",
                       "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
                       "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∏ –ø–æ–ª–µ–∑–Ω–∞"],
                 state=TestTwoStates.THREE_STATES)
async def answer_four_handler(message):
    check = {
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–æ–∂–Ω–∞—è –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è": 1,
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ —Å–∫—É—á–Ω–∞—è —Ç–µ–º–∞": 2,
        "–ù–∏–∫–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å": 3,
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ": 4,
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∏ –ø–æ–ª–µ–∑–Ω–∞": 5
    }
    db.set_end_answer_three(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestTwoStates.FOUR_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–ß–µ–ª–æ–≤–µ—á–∫–∏ –∫—Ä—É—Ç—ã–µ!"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ß–µ–ª–æ–≤–µ—á–∫–∏ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ß–µ–ª–æ–≤–µ—á–∫–∏ –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ß–µ–ª–æ–≤–µ—á–∫–∏ –±—ã–ª–∏ —Å–∫—É—á–Ω—ã–º–∏"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ß–µ–ª–æ–≤–µ—á–∫–∏ –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer(
        "–ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ª–∏ —Ç–µ–±–µ ¬´—á–µ–ª–æ–≤–µ—á–∫–∏¬ª, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ß–µ–ª–æ–≤–µ—á–∫–∏ –∫—Ä—É—Ç—ã–µ!",
                       "–ß–µ–ª–æ–≤–µ—á–∫–∏ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å",
                       "–ß–µ–ª–æ–≤–µ—á–∫–∏ –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏",
                       "–ß–µ–ª–æ–≤–µ—á–∫–∏ –±—ã–ª–∏ —Å–∫—É—á–Ω—ã–º–∏",
                       "–ß–µ–ª–æ–≤–µ—á–∫–∏ –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å"],
                 state=TestTwoStates.FOUR_STATES)
async def answer_five_handler(message):
    check = {
        "–ß–µ–ª–æ–≤–µ—á–∫–∏ –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å": 1,
        "–ß–µ–ª–æ–≤–µ—á–∫–∏ –±—ã–ª–∏ —Å–∫—É—á–Ω—ã–º–∏": 2,
        "–ß–µ–ª–æ–≤–µ—á–∫–∏ –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏": 3,
        "–ß–µ–ª–æ–≤–µ—á–∫–∏ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å": 4,
        "–ß–µ–ª–æ–≤–µ—á–∫–∏ –∫—Ä—É—Ç—ã–µ!": 5
    }
    db.set_end_answer_four(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestTwoStates.FIVE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–û–Ω–∏ –ø–æ–≥—Ä—É–∑–∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û–Ω–∏ –ø–æ–º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–° –Ω–∏–º–∏ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û–Ω–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω—ã"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û–Ω–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–∏"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ü–æ–º–æ–≥–ª–∏ –ª–∏ ¬´—á–µ–ª–æ–≤–µ—á–∫–∏¬ª –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–û–Ω–∏ –ø–æ–≥—Ä—É–∑–∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                       "–û–Ω–∏ –ø–æ–º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
                       "–° –Ω–∏–º–∏ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ",
                       "–û–Ω–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω—ã",
                       "–û–Ω–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–∏"],
                 state=TestTwoStates.FIVE_STATES)
async def answer_six_handler(message):
    check = {
        "–û–Ω–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–∏": 1,
        "–û–Ω–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω—ã": 2,
        "–° –Ω–∏–º–∏ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ": 3,
        "–û–Ω–∏ –ø–æ–º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏": 4,
        "–û–Ω–∏ –ø–æ–≥—Ä—É–∑–∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞": 5
    }
    db.set_end_answer_five(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestTwoStates.SIX_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –∫—Ä—É—Ç–æ!"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –∫—Ä—É—Ç–æ!",
                       "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ",
                       "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ",
                       "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ",
                       "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"],
                 state=TestTwoStates.SIX_STATES)
async def answer_seven_handler(message):
    check = {
        "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ": 1,
        "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ": 2,
        "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ": 3,
        "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ": 4,
        "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ –∫—Ä—É—Ç–æ!": 5
    }
    db.set_end_answer_six(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.FEEDBACK)
    await asyncio.sleep(2)
    return "–ù–∞–ø–∏—à–∏ –Ω–∞–º –æ—Ç–∑—ã–≤ –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —ç—Ç–∞ –∏–≥—Ä–∞ —Å –Ω–∞–º–∏! üòä "


# ------------------------------------------------------------------------------------------------

@labeler.message(text="check")
async def check(message):
    user_id = db.get_user_id(message.peer_id)[0][0]
    if bool(user_id):
        ctx_storage.set(f"{message.peer_id}_team", (int(user_id) % 10))
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.FEEDBACK)
    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ"


@labeler.message(state=PartTwoStates.FEEDBACK)
async def part_two_six_pass_handler(message):
    if len(message.text) < 200:
        db.set_feedback(message.peer_id, message.text)
        await bot.state_dispenser.set(message.peer_id, PartTwoStates.UPDATEFEEDBACK)
        await asyncio.sleep(2)
        return "–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π –∏–≥—Ä—ã? –ú—ã –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    else:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${len(message.text)}")


@labeler.message(state=PartTwoStates.UPDATEFEEDBACK)
async def part_two_seven_pass_handler(message):
    if len(message.text) < 200:
        db.set_updatefeedback(message.peer_id, message.text)
        keyboard = (
            Keyboard(inline=True)
            .add(Text("–î–∞"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–ù–µ—Ç"), color=KeyboardButtonColor.POSITIVE)
        ).get_json()
        await asyncio.sleep(2)
        messageForReturn = await message.answer("–•–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –Ω–∞—à—É —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É ¬´–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±—É–¥—É—â–µ–≥–æ¬ª?",
                                                keyboard=keyboard)
        await bot.state_dispenser.set(message.peer_id, PartTwoStates.NEXTGAME)
        return messageForReturn
    else:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${len(message.text)}")


@labeler.message(text=["–î–∞", "–ù–µ—Ç"], state=PartTwoStates.NEXTGAME)
async def part_two_eight_pass_handler(message):
    db.set_nextgame(message.peer_id, message.text)
    photo_1 = await photo_uploader.upload(
        file_source=f"img/endgame.jpg",
        peer_id=message.peer_id,
    )
    document_pdf = await excel_uploader.upload(
        file_source=f"img/–õ–∏—Å—Ç–æ–≤–∫–∞_–ë–∞–∑–æ–≤–∞—è_–∫–∞—Ñ–µ–¥—Ä–∞_–û–º–ì–¢–£_2024_2025_2.pdf",
        peer_id=message.peer_id,
        title='–õ–∏—Å—Ç–æ–≤–∫–∞_–ë–∞–∑–æ–≤–∞—è_–∫–∞—Ñ–µ–¥—Ä–∞_–û–º–ì–¢–£_2024_2025_2.pdf'
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã –∏ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ ¬´–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±—É–¥—É—â–µ–≥–æ¬ª ü§ó", attachment=photo_1)
    await asyncio.sleep(2)
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –¥–∞—Ä–∏–º —Ç–µ–±–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã")
    await asyncio.sleep(2)
    await message.answer('–ù–∞—à–µ –æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—è! –ï—Å–ª–∏ —Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É –æ–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É, —Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –¥—Ä—É–≥–æ–º "–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ç—å-–û–ù–ü–ó"')
    await asyncio.sleep(2)
    await message.answer('–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –ø–æ—Å—Ç—É–ø–∏–≤ –Ω–∞ –±–∞–∑–æ–≤—É—é –∫–∞—Ñ–µ–¥—Ä—É "–ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å" –≤ –û–º–ì–¢–£')
    await asyncio.sleep(2)
    await message.answer("–ò —Ç—ã –µ—â–µ —É—Å–ø–µ–≤–∞–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤—É–∑!")
    await asyncio.sleep(2)
    await message.answer('''–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è:

1. –ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ì –∏–ª–∏ WhatsApp –∫—É—Ä–∞—Ç–æ—Ä—É –±–∞–∑–æ–≤–æ–π –∫–∞—Ñ–µ–¥—Ä—ã –ê–Ω–Ω–µ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–µ –ø–æ –Ω–æ–º–µ—Ä—É 89136320877
2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é –ê–Ω–Ω–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞ —Ç–µ–±–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç
3. –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Å—Ç–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º –±–∞–∑–æ–≤–æ–π –∫–∞—Ñ–µ–¥—Ä—ã "–ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç–∏" –≤ –û–º–ì–¢–£
''')
    await asyncio.sleep(2)
    await message.answer('''–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ 18 –∏—é–ª—è! –ù–æ –ª—É—á—à–µ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞ –µ—â–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å''')
    await asyncio.sleep(2)
    await message.answer('''–ê –ø–æ–∫–∞ –ª–æ–≤–∏ –ª–∏—Å—Ç–æ–≤–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–æ ''', attachment=document_pdf)
    await asyncio.sleep(2)
    await message.answer('''–ù—É –≤—Å–µ, —Ç–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏!''')

    await bot.state_dispenser.delete(message.peer_id)

