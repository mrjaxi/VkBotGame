import asyncio
from datetime import datetime

from vkbottle import CtxStorage
from vkbottle import Keyboard, KeyboardButtonColor, \
    Text
import bot
from config import labeler, photo_uploader, audio_uploader
from data.group import group_position_name
from data.partOneMessage import first_part_message_one
from database.db import Database
from states.mystates import WelcomeStates, PartOneStates, TestOneStates, PartTwoStates, PartThreeStates

ctx_storage = CtxStorage()
db = Database('database.db')


@labeler.message(command="dell")
async def dell_user(message):
    db.del_user(message.peer_id)

    await message.answer("–î–∞–Ω–Ω—ã–µ –æ –≤–∞—Å –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")


@labeler.message(command="part")
async def test_user(message):
    nowdate = datetime.now()
    user_id = db.get_user_id(message.peer_id)[0][0]
    ctx_storage.set(f"{message.peer_id}_team", (int(user_id) % 10))
    ctx_storage.set(f"{message.peer_id}_number", 0)
    await bot.state_dispenser.set(message.peer_id, PartTwoStates.PASSWORD_START_TWO_STATES)
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")


@labeler.message(text=['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É! üåü'])
async def start_handler(message):
    if db.user_exists(int(message.peer_id)):
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        await bot.state_dispenser.set(message.peer_id, WelcomeStates.PASSWORD_START_STATE)
        # if (bool(ctx_storage.get("fio"))):
        #     await  message.answer(CtxStorage().get("fio"))
        return "üîí  –ù–∞–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å –∏–≥—Ä—ã"


@labeler.message(state=WelcomeStates.PASSWORD_START_STATE)
async def password_handler(message):
    # password_for_start_game = "3333"
    if (message.text == "0102032024") or (message.text == "0103032024"):
        number = 0
        ctx_storage.set(f"{message.peer_id}_number", 0)
        # if message.text == "8888":
        #     number = 0
        #     ctx_storage.set(f"{message.peer_id}_number", 0)
        # elif message.text == "5555":
        #     number = 1
        #     ctx_storage.set(f"{message.peer_id}_number", 1)
        # elif message.text == "6666":
        #     number = 2
        #     ctx_storage.set(f"{message.peer_id}_number", 2)
        # else:
        #     number = 3
        #     ctx_storage.set(f"{message.peer_id}_number", 3)
        # await message.answer(CtxStorage().get("a"))
        keyboard = (
            Keyboard(inline=True)
            .add(Text("–ì–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º! üòé"), color=KeyboardButtonColor.POSITIVE)
        ).get_json()
        nowdate = datetime.now()
        newdate = nowdate.strftime("%d/%m/%Y")
        db.add_user(message.peer_id, newdate, number)

        await message.answer("–¢—ã –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å! ü•≥"
                             "\n\n–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—à—É –∏–≥—Ä—É! ", keyboard=keyboard)

    elif (message.text == "–ì–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º! üòé"):
        photo1 = await photo_uploader.upload(
            file_source=f"img/–ß–ê–°–¢–¨ 1 - –¢–ï–•–ù–õ–û–ì–ò–Ø.png",
            peer_id=message.peer_id,
        )
        await message.answer("""–í —ç—Ç–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–µ 3 —á–∞—Å—Ç–∏ :\n\n1. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è\n\n2. –ö–∞—Ä—å–µ—Ä–∞\n\n3. –í—ã–∑–æ–≤—ã\n\n–ò –≤–æ—Ç —Å –∫–∞–∫–æ–π –º—ã —á–∞—Å—Ç–∏ –Ω–∞—á–Ω–µ–º !""",
                             attachment=photo1)

        try:
            audio = await audio_uploader.upload(
                file_source="voice/hello.mp3",
                peer_id=message.peer_id,
                title='–Ω–∞–∑–≤–∞–Ω–∏–µ'
            )
            await message.answer(attachment=audio)
        except Exception:
            await message("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:(")

        keyboard = (
            Keyboard(inline=True)
            .add(Text("–ù–∞—á–∏–Ω–∞–µ–º! üí´"), color=KeyboardButtonColor.POSITIVE)
        ).get_json()

        await asyncio.sleep(3)

        await message.answer("–ù—É –∫–∞–∫, —Ç—ã –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ —ç—Ç–æ –¥–µ–ª–æ?", keyboard=keyboard)

        mess_key = await bot.state_dispenser.set(message.peer_id, WelcomeStates.VOICE_HELLO_STATE)
        return mess_key
    else:
        return "–û–π, –æ—à–∏–±–∫–∞. ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòä "

@labeler.message(text=["–ù–∞—á–∏–Ω–∞–µ–º! üí´"], state=WelcomeStates.VOICE_HELLO_STATE)
async def fio_handler(message):
    await message.answer("–ö–∞–∫ –∂–µ —è —Ä–∞–¥, —á—Ç–æ —É –º–µ–Ω—è –ø–æ—è–≤–∏–ª—Å—è —Ç–∞–∫–æ–π –ø—Ä–µ–µ–º–Ω–∏–∫, –∫–∞–∫ —Ç—ã! üòä"
                         "\n\n–û—Å—Ç–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –í–æ—Ç —Ç–µ–±–µ –∞–Ω–∫–µ—Ç–∞")
    await bot.state_dispenser.set(message.peer_id, WelcomeStates.FIO_STATE)
    return "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û"

@labeler.message(state=WelcomeStates.FIO_STATE)
async def city_handler(message):
    nowdate = datetime.now()
    newdate = nowdate.strftime("%d/%m/%Y")
    # ctx_storage.set("fio", "–†–∞—Ö–º–µ—Ç–æ–≤ –í–∞–¥–∏–º –ò–ª—å—à–∞—Ç–æ–≤–∏—á")
    user_id = db.get_user_id(message.peer_id)[0][0] - 1
    db.add_user_test_one(message.peer_id, newdate, message.text)
    # –≤—Å—Ç–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥—É
    db.set_name_and_team(message.peer_id, message.text, (int(user_id) % 10))
    ctx_storage.set(f"{message.peer_id}_team", (int(user_id) % 10))

    await bot.state_dispenser.set(message.peer_id, WelcomeStates.CITY_STATE)
    return "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞? üèôÔ∏è"


# @labeler.message(state=WelcomeStates.CITY_STATE)
# async def class_handler(message):
#     db.set_city(message.peer_id, message.text)
#
#     keyboard = (
#         Keyboard(inline=True)
#         .add(Text("–õ–∏—Ü–µ–π ‚Ññ86"), color=KeyboardButtonColor.POSITIVE)
#         .row()
#         .add(Text("–®–∫–æ–ª–∞ ‚Ññ4"), color=KeyboardButtonColor.POSITIVE)
#     ).get_json()
#     await bot.state_dispenser.set(message.peer_id, WelcomeStates.CLASS_STATE)
#     messageForReturn = await message.answer("–í –∫–∞–∫–æ–π —à–∫–æ–ª–µ —Ç—ã —É—á–∏—à—å—Å—è? üè´",
#                                             keyboard=keyboard)
#     return messageForReturn


# —ç—Ç–æ –±—ã–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ —à–∫–æ–ª—É, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ –≥–æ—Ä–æ–¥
@labeler.message(state=WelcomeStates.CITY_STATE)
async def end_handler(message):
    db.set_city(message.peer_id, message.text)
    # db.set_school(message.peer_id, message.text)
    # db.set_school_test_one(message.peer_id, message.text)

    # keyboard = (
    #     Keyboard(inline=True)
    #     .add(Text("10"), color=KeyboardButtonColor.POSITIVE)
    #     .add(Text("11"), color=KeyboardButtonColor.POSITIVE)
    # ).get_json()
    await bot.state_dispenser.set(message.peer_id, WelcomeStates.SCHOOL_STATE)
    # messageForReturn = await message.answer("–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?",
    #                                         keyboard=keyboard)
    return "–í –∫–∞–∫–æ–π —à–∫–æ–ª–µ —Ç—ã —É—á–∏—à—å—Å—è? –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üè´ "

@labeler.message(state=WelcomeStates.SCHOOL_STATE)
async def school_handler(message):
    db.set_school(message.peer_id, message.text)
    await bot.state_dispenser.set(message.peer_id, WelcomeStates.END_STATE_ONE)
    return "–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"

#TODO: –ù–µ –∑–Ω–∞—é –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –ø–µ—á–∞—Ç–∏
@labeler.message(state=WelcomeStates.END_STATE_ONE)
async def end_one_handler(message):
    db.set_user_class(message.peer_id, message.text)
    db.set_number_class(message.peer_id, message.text)
    await message.answer("–£—Ä–∞! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! üíØ –û—Ç–ø—Ä–∞–≤–ª—è—é –µ–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    await asyncio.sleep(3)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞")
    await asyncio.sleep(3)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞")
    await asyncio.sleep(3)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞")
    await asyncio.sleep(4)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! üíØ")

    # --------------------------------–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–ª–æ–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –î–∏–º—ã-----------------------------------------------------------------------------------
    await message.answer("–ò —É–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –Ω–∞—á–Ω–µ–º –Ω–∞—à—É –∏–≥—Ä—É! ü§© "
                         "\n\n–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã üòä")
    await asyncio.sleep(3)
    await bot.state_dispenser.set(message.peer_id, TestOneStates.ONE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–û—Ç —É—á–∏—Ç–µ–ª—è"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ò–∑ –∏–Ω—Ç—Ä–µ–Ω–µ—Ç–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç –¥—Ä—É–∑–µ–π"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–Ø —Å–ª—É—á–∞–π–Ω–æ —Ç—É—Ç –æ–∫–∞–∑–∞–ª—Å—è"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer('–û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –ø—Ä–æ –∏–≥—Ä—É "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±—É–¥—É—â–µ–≥–æ"?',
                                    keyboard=keyboard)
    return mess_key


@labeler.message(state=TestOneStates.ONE_STATES)
async def answer_two_handler(message):
    check = {
        "–û—Ç —É—á–∏—Ç–µ–ª—è": 1,
        "–û—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π": 2,
        "–ò–∑ –∏–Ω—Ç—Ä–µ–Ω–µ—Ç–∞": 3,
        "–û—Ç –¥—Ä—É–∑–µ–π": 4,
        "–Ø —Å–ª—É—á–∞–π–Ω–æ —Ç—É—Ç –æ–∫–∞–∑–∞–ª—Å—è": 5
    }
    db.set_test_answer_one(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.TWO_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–§–∏–∑–∏–∫–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–•–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–î—Ä—É–≥–æ–µ"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ö–∞–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–±–µ –±–ª–∏–∂–µ?", keyboard=keyboard)
    return mess_key


@labeler.message(state=TestOneStates.TWO_STATES)
async def answer_three_handler(message):
    check = {
        "–§–∏–∑–∏–∫–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 1,
        "–•–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è": 2,
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": 3,
        "–î—Ä—É–≥–æ–µ": 4
    }
    db.set_test_answer_two(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.THREE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–ù–µ –∑–Ω–∞—é –Ω–∏—á–µ–≥–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ó–Ω–∞—é –Ω–µ–º–Ω–æ–≥–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–•–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ó–Ω–∞–∫–æ–º –ª–∏ —Ç—ã —Å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ—Ñ—Ç–∏?", keyboard=keyboard)
    return mess_key


@labeler.message(state=TestOneStates.THREE_STATES)
async def answer_four_handler(message):
    check = {
        "–ù–µ –∑–Ω–∞—é –Ω–∏—á–µ–≥–æ": 1,
        "–ó–Ω–∞—é –Ω–µ–º–Ω–æ–≥–æ": 2,
        "–•–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å": 3
    }
    db.set_test_answer_three(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.TWELVE_STATES)
    keyboard = (
        Keyboard(inline=True)
            .add(Text("–ù–µ –∑–Ω–∞—é –Ω–∏—á–µ–≥–æ"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–ó–Ω–∞—é –Ω–µ–º–Ω–æ–≥–æ"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–•–æ—Ä–æ—à–æ –∑–Ω–∞–∫–æ–º"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ó–Ω–∞–∫–æ–º –ª–∏ —Ç—ã —Å ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å-–û–ù–ü–ó¬ª?", keyboard=keyboard)
    return mess_key


@labeler.message(state=TestOneStates.FOUR_STATES)
async def answer_five_handler(message):
    check = {
        "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è": 1,
        "–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ": 2,
        "–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ": 3,
        "–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ": 4,
        "–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ": 5
    }
    db.set_test_answer_four(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.FIVE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–¢–æ–ª—å–∫–æ –±–µ–Ω–∑–∏–Ω–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ë–µ–Ω–∑–∏–Ω–∞ –∏ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–†–µ–∑–∏–Ω—ã"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ü–ª–∞—Å—Ç–º–∞—Å—Å—ã"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ë–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ–π"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Ñ—Ç—å? –ü–æ–ª—É—á–µ–Ω–∏—è/–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–¢–æ–ª—å–∫–æ –±–µ–Ω–∑–∏–Ω–∞",
                       "–ë–µ–Ω–∑–∏–Ω–∞ –∏ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞",
                       "–†–µ–∑–∏–Ω—ã",
                       "–ü–ª–∞—Å—Ç–º–∞—Å—Å—ã",
                       "–ë–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ–π"],
                 state=TestOneStates.FIVE_STATES)
async def answer_six_handler(message):
    check = {
        "–¢–æ–ª—å–∫–æ –±–µ–Ω–∑–∏–Ω–∞": 1,
        "–ë–µ–Ω–∑–∏–Ω–∞ –∏ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞": 2,
        "–†–µ–∑–∏–Ω—ã": 3,
        "–ü–ª–∞—Å—Ç–º–∞—Å—Å—ã": 4,
        "–ë–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ–π": 5
    }
    db.set_test_answer_five(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.SIX_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–ú–Ω–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ú–Ω–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–í–æ–∑–º–æ–∂–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ—Ç, —ç—Ç–æ —Å–∫—É—á–Ω–∞—è —Ç–µ–º–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ—Ç, —ç—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–•–æ—Ç–µ–ª–æ—Å—å –±—ã —Ç–µ–±–µ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–µ—Ñ—Ç—è–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ú–Ω–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π",
                       "–ú–Ω–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
                       "–í–æ–∑–º–æ–∂–Ω–æ",
                       "–ù–µ—Ç, —ç—Ç–æ —Å–∫—É—á–Ω–∞—è —Ç–µ–º–∞",
                       "–ù–µ—Ç, —ç—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
                 state=TestOneStates.SIX_STATES)
async def answer_seven_handler(message):
    check = {
        "–ù–µ—Ç, —ç—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": 1,
        "–ù–µ—Ç, —ç—Ç–æ —Å–∫—É—á–Ω–∞—è —Ç–µ–º–∞": 2,
        "–í–æ–∑–º–æ–∂–Ω–æ": 3,
        "–ú–Ω–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ": 4,
        "–ú–Ω–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π": 5
    }
    db.set_test_answer_six(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.SEVEN_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–ù—Ä–∞–≤—è—Ç—Å—è –ª–∏ —Ç–µ–±–µ –Ω–µ—Ñ—Ç—è–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è",
                       "–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ",
                       "–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                       "–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ",
                       "–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ"],
                 state=TestOneStates.SEVEN_STATES)
async def answer_eight_handler(message):
    check = {
        "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è": 1,
        "–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ": 2,
        "–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ": 3,
        "–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ": 4,
        "–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ": 5
    }
    db.set_test_answer_seven(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.EIGHT_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–•–æ—Ç–µ–ª –±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–ø–∞–Ω–∏–∏"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ú–Ω–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ –∑–Ω–∞—é"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer("–•–æ—Ç–µ–ª–æ—Å—å –±—ã —Ç–µ–±–µ –≤ –±—É–¥—É—â–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ—Ñ—Ç—è–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?", keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç",
                       "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç",
                       "–ù–µ –∑–Ω–∞—é",
                       "–ú–Ω–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
                       "–•–æ—Ç–µ–ª –±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–ø–∞–Ω–∏–∏"],
                 state=TestOneStates.EIGHT_STATES)
async def answer_nine_handler(message):
    check = {
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç": 1,
        "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç": 2,
        "–ù–µ –∑–Ω–∞—é": 3,
        "–ú–Ω–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ": 4,
        "–•–æ—Ç–µ–ª –±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–ø–∞–Ω–∏–∏": 5
    }
    db.set_test_answer_eight(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.NINE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–î–∞, –∑–Ω–∞—é, –∏ —è –æ—Ç –Ω–∏—Ö –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–î–∞, –æ–Ω–∏ –º–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–î–∞, —Å–ª—ã—à–∞–ª"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer(
        "–°–ª—ã—à–∞–ª –ª–∏ —Ç—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–æ–¥—è—Ç –Ω–µ—Ñ—Ç—è–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏?",
        keyboard=keyboard)
    return mess_key


@labeler.message(text=["–î–∞, –∑–Ω–∞—é, –∏ —è –æ—Ç –Ω–∏—Ö –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ",
                       "–î–∞, –æ–Ω–∏ –º–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è",
                       "–î–∞, —Å–ª—ã—à–∞–ª",
                       "–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª",
                       "–ù–µ—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"],
                 state=TestOneStates.NINE_STATES)
async def answer_ten_handler(message):
    check = {
        "–ù–µ—Ç, –º–Ω–µ —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ": 1,
        "–ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª": 2,
        "–î–∞, —Å–ª—ã—à–∞–ª": 3,
        "–î–∞, –æ–Ω–∏ –º–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è": 4,
        "–î–∞, –∑–Ω–∞—é, –∏ —è –æ—Ç –Ω–∏—Ö –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ": 5
    }
    db.set_test_answer_nine(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.TEN_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer(
        "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —Ä–µ–≥–∏–æ–Ω –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –∂–∏–≤–µ—à—å? ",
        keyboard=keyboard)
    return mess_key


@labeler.message(text=["–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ",
                       "–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ",
                       "–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                       "–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ",
                       "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"],
                 state=TestOneStates.TEN_STATES)
async def answer_eleven_handler(message):
    check = {
        "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è": 1,
        "–û—Ç–Ω–æ—à—É—Å—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ": 2,
        "–û—Ç–Ω–æ—à—É—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ": 3,
        "–û—Ç–Ω–æ—à—É—Å—å —Ö–æ—Ä–æ—à–æ": 4,
        "–û—Ç–Ω–æ—à—É—Å—å –æ—Ç–ª–∏—á–Ω–æ": 5
    }
    db.set_test_answer_ten(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.ELEVEN_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–ü–ª–∞–Ω–∏—Ä—É—é –æ—Å—Ç–∞—Ç—å—Å—è, —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∂–∏—Ç—å –∑–¥–µ—Å—å"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–í–æ–∑–º–æ–∂–Ω–æ"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer(
        "–•–æ—Ç–µ–ª –±—ã —Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ?",
        keyboard=keyboard)
    return mess_key


@labeler.message(text=["–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç",
                       "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç",
                       "–í–æ–∑–º–æ–∂–Ω–æ",
                       "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ",
                       "–ü–ª–∞–Ω–∏—Ä—É—é –æ—Å—Ç–∞—Ç—å—Å—è, —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∂–∏—Ç—å –∑–¥–µ—Å—å"],
                 state=TestOneStates.ELEVEN_STATES)
async def answer_twelve_handler(message):
    check = {
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ—Ç": 1,
        "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç": 2,
        "–í–æ–∑–º–æ–∂–Ω–æ": 3,
        "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ": 4,
        "–ü–ª–∞–Ω–∏—Ä—É—é –æ—Å—Ç–∞—Ç—å—Å—è, —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∂–∏—Ç—å –∑–¥–µ—Å—å": 5
    }
    db.set_test_answer_eleven(message.peer_id, message.text, check[message.text])
    await bot.state_dispenser.set(message.peer_id, TestOneStates.TWELVE_STATES)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–õ—é–¥–∏ —Å –æ—Ç–ª–∏—á–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–ª—å–∑—É –æ–±—â–µ—Å—Ç–≤—É"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–õ—é–¥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–õ—é–¥–∏, –Ω–µ –¥–æ—Å—Ç–∏–≥—à–∏–µ —É—Å–ø–µ—Ö–∞"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    mess_key = await message.answer(
        "–ù–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥ –ª—é–¥–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ —Å–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ —ç—Ç–æ",
        keyboard=keyboard)
    return mess_key


@labeler.message(state=TestOneStates.TWELVE_STATES)
async def answer_end_handler(message):
    check = {
        "–ù–µ –∑–Ω–∞—é –Ω–∏—á–µ–≥–æ": 1,
        "–ó–Ω–∞—é –Ω–µ–º–Ω–æ–≥–æ": 2,
        "–•–æ—Ä–æ—à–æ –∑–Ω–∞–∫–æ–º": 3
    }
    db.set_test_answer_four(message.peer_id, message.text, check[message.text])
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!"
                         "\n–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∏–≥—Ä—É üöÄ")
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–î–∞–∞! üòä"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ö–æ–Ω–µ—á–Ω–æ! üòé"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    await bot.state_dispenser.set(message.peer_id, WelcomeStates.END_STATE_TWO)
    messageForReturn = await message.answer("–£–†–ê, –£–†–ê, –£–†–ê! üéâ –°–µ–≥–æ–¥–Ω—è –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å!"
                                            "\n\n–î–∞–≤–∞–π –Ω–µ –±—É–¥–µ–º —Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏. –ì–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?",
                                            keyboard=keyboard)
    return messageForReturn


@labeler.message(text=["–î–∞–∞! üòä", "–ö–æ–Ω–µ—á–Ω–æ! üòé"],
                 state=WelcomeStates.END_STATE_TWO)
async def end_button_handler(message):
    await message.answer("–¢—ã –∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –∑–∞–≤–æ–¥ –æ–≥—Ä–æ–º–Ω—ã–π")
    # —Ç—É—Ç –±—É–¥–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞
    photo1 = await photo_uploader.upload(
        file_source=f"img/–ó–∞–≤–æ–¥.jpg",
        peer_id=message.peer_id,
    )
    await message.answer("–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç", attachment=photo1)

    keyboard = (
        Keyboard(inline=True)
            .add(Text("–í–∞—É!"), color=KeyboardButtonColor.POSITIVE)
            .row()
            .add(Text("–ö—Ä–∞—Å–∏–≤–æ!"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()

    await message.answer(
        "–ö–∞–∫ —Ç–µ–±–µ?" ,
        keyboard=keyboard)

@labeler.message(text=["–í–∞—É!", "–ö—Ä–∞—Å–∏–≤–æ!"],state=WelcomeStates.END_STATE_TWO)
async def end_button_handler(message):
    keyboard = (
        Keyboard(inline=True)
            .add(Text("–£–∑–Ω–∞—Ç—å! üòº"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()

    await message.answer(
        "–ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –∑–∞–≤–æ–¥ –±—É–¥—É—Ç —Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ù–∞–º –≤–µ–¥—å –Ω—É–∂–Ω–æ —É—Å–ø–µ—Ç—å! –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫—É—é —á–∞—Å—Ç—å –∑–∞–≤–æ–¥–∞ –±—É–¥–µ—à—å —Å—Ç—Ä–æ–∏—Ç—å —Ç—ãüë∑" ,
        keyboard=keyboard)

@labeler.message(text=["–£–∑–Ω–∞—Ç—å! üòº"],state=WelcomeStates.END_STATE_TWO)
async def end_button_handler(message):
    keyboard = (
        Keyboard(inline=True)
            .add(Text("–í –∫–∞–∫–æ–π —è –∫–æ–º–∞–Ω–¥–µ?"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ. –í—Ä–µ–º–µ–Ω–∏ —É –Ω–∞—Å –º–∞–ª–æ‚è≥, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å" ,
        keyboard=keyboard)


@labeler.message(text=["–í –∫–∞–∫–æ–π —è –∫–æ–º–∞–Ω–¥–µ?"], state=WelcomeStates.END_STATE_TWO)
async def my_team_handler(message):
    # user = db.search_user_team(ctx_storage.get(f"{message.peer_id}_team"), ctx_storage.get(f"{message.peer_id}_number"))
    # str = ""
    # count = 0
    # for i in user:
    #     count += 1
    #     str += f"\n{count}: {i[0]}"
    id_team = ctx_storage.get(f"{message.peer_id}_team")

    await message.answer(f'''–¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ: "{group_position_name[id_team]}"''')
    # —Å–æ–æ–±–∑–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    await asyncio.sleep(7)
    await message.answer(first_part_message_one[id_team])

    # –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(3)
    keyboard = (
        Keyboard(inline=True)
        .add(Text("–Ø –ø–æ–¥–æ—à–µ–ª –∫ —Å—Ç–æ–ª—É üòä"), color=KeyboardButtonColor.POSITIVE)
    ).get_json()
    message_key = await message.answer(
        "–ü–æ–¥–æ–π–¥–∏ –∫ —Å—Ç–æ–ª—É, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", keyboard=keyboard)
    # ctx_storage.delete(f"{message.peer_id}_team")
    # ctx_storage.delete(f"{message.peer_id}_number")
    await bot.state_dispenser.set(message.peer_id, PartOneStates.START_STATE)
    return message_key
